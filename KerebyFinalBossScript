import time
import logging
import requests
from playwright.sync_api import sync_playwright

# Config
URL = "https://kerebyudlejning.dk/"
BOT_TOKEN = "7782033265:AAGe5R2xGulWto12s6NwCI-oOPEAi9n4RFU"
CHAT_ID = 6102161519
LOG_FILE = "playwright_bot.log"
LOG_TO_CONSOLE = False  #  Set this to True to log to console
seen = set()

# Logging
handlers = [logging.FileHandler(LOG_FILE)]
if LOG_TO_CONSOLE:
    handlers.append(logging.StreamHandler())

logging.basicConfig(
    level=logging.INFO,  # Change to DEBUG for verbose logging
    format="%(asctime)s [%(levelname)s] %(message)s",
    handlers=handlers
)
logger = logging.getLogger(__name__)

def notify(full_url):
    logger.info(f"Sending notification for: {full_url}")
    try:
        response = requests.get(
            f"https://api.telegram.org/bot{BOT_TOKEN}/sendMessage",
            params={"chat_id": CHAT_ID, "text": f"ðŸ”” New listing: {full_url}"}
        )
        logger.debug(f"Telegram response: {response.text}")
    except Exception as e:
        logger.error(f"[Notify Error] {e}")

def get_links(page):
    logger.info("Navigating to URL...")
    try:
        page.goto(URL, wait_until="domcontentloaded", timeout=60000)
        logger.info("Page loaded successfully.")
    except Exception as e:
        logger.error(f"[Goto Error] {e}")
        return []

    try:
        logger.info("Waiting for rental listing elements...")
        page.wait_for_selector("a.rental-card", timeout=15000)
        logger.info("Listings found.")
    except Exception as e:
        logger.warning(f"[Selector Warning] {e}")
        return []

    elements = page.query_selector_all("a.rental-card")
    links = [a.get_attribute("href") for a in elements]
    logger.debug(f"Extracted links: {links}")
    return links

def main():
    logger.info("Bot started.")
    with sync_playwright() as p:
        logger.debug("Launching browser...")
        browser = p.chromium.launch(headless=True)
        page = browser.new_page()
        while True:
            logger.info("Checking for new listings...")
            links = get_links(page)
            for href in links:
                if href not in seen:
                    seen.add(href)
                    full = href if href.startswith("http") else URL.rstrip("/") + href
                    logger.info(f"New listing found: {full}")
                    notify(full)
                else:
                    logger.debug(f"Already seen: {href}")
            logger.info("Sleeping for 10 seconds...")
            time.sleep(10)

if __name__ == "__main__":
